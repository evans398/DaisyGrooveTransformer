/** Example of setting reading MIDI Input via UART
* 
*
*  This can be used with any 5-pin DIN or TRS connector that has been wired up
*  to one of the UART Rx pins on Daisy.
*  This will use D14 as the UART 1 Rx pin
*
*  This example will also log incoming messages to the serial port for general MIDI troubleshooting
*/
#include "daisy_seed.h"
/** This prevents us from having to type "daisy::" in front of a lot of things. */
using namespace daisy;
/** Fills string with string representation of MidiEvent::Type
*  str needs to be at least 16 bytes long to store the data
* TODO: Move this into MIDI lib or something
*/
void GetMidiTypeAsString(MidiEvent& msg, char* str)
{
   switch(msg.type)
   {
       case NoteOff: strcpy(str, "NoteOff"); break;
       case NoteOn: strcpy(str, "NoteOn"); break;
       default: strcpy(str, "Unknown"); break;
   }
}
/** Global Hardware access */
DaisySeed       hw;
MidiUartHandler midi;
/** FIFO to hold messages as we're ready to print them */
FIFO<MidiEvent, 1024> event_log;
int counter = 0;
int main(void)
{
   /** Initialize our hardware */
   hw.Init();
   hw.StartLog();
   MidiUartHandler::Config midi_config;
   midi.Init(midi_config);
   midi.StartReceive();
   /** Infinite Loop */
   while(1)
   {
       // hw.PrintLine("running...");
       /** Process MIDI in the background */
       midi.Listen();
       /** Loop through any MIDI Events */
       while(midi.HasEvents())
       {
           counter++;
           hw.PrintLine("Counter: %d", counter);
           MidiEvent msg = midi.PopEvent();
           /** Handle messages as they come in
            *  See DaisyExamples for some examples of this
            */
           switch(msg.type)
           {
               case NoteOn: {
                   hw.PrintLine("NOTE ON");
                   // int vel = (int) msg.AsNoteOn().velocity;
                   // hw.PrintLine("Onset note vel %d", vel);
                   // Do something on Note On events
                   break;
               }
               default: break;
           }
           /** Regardless of message, let's add the message data to our queue to output */
           event_log.PushBack(msg);
       }
   }
}
